---
description: 
globs: 
alwaysApply: true
---

## Используемые технологии

### Библиотеки (pyproject.toml)
- **fastapi** - веб-фреймворк для создания API
- **sqlalchemy** - ORM для работы с базами данных
- **alembic** - инструмент миграций базы данных
- **psycopg** - драйвер PostgreSQL
- **pydantic**, **pydantic-settings** - валидация данных и настройки
- **python-dotenv** - работа с .env файлами
- **uvicorn** - ASGI сервер

### Пакетный менеджер
- **uv** - современный менеджер пакетов на Rust (альтернатива pip/Poetry)
  - Быстрее стандартных инструментов
  - Управляет зависимостями и виртуальными окружениями

## Структура проекта
```
src/                        # Основная директория кода
  ├── main.py               # Точка входа FastAPI приложения
  ├── app/                  # Настройки и конфигурация проекта
  │   ├── settings.py       # Конфигурация через pydantic
  │   └── db.py             # Настройки БД с SQLAlchemy
  ├── schemas/              # Модели данных
  │   └── pg_schema/        # PostgreSQL модели
  └── use_cases/            # Бизнес-логика
      └── one_of_use_case/  # Функционал одного кейса
          ├── router.py     # Обработчики HTTP запросов
          ├── service.py    # Бизнес-логика
          ├── repository.py # Доступ к данным
          └── dto.py        # Объекты передачи данных
```

## Архитектура
Проект следует принципам чистой архитектуры с разделением на слои:
- **Presentation** (API) - FastAPI роутеры
- **Domain** (бизнес-логика) - сервисы
- **Data** (доступ к данным) - репозитории и модели

## Запуск проекта
- Через uvicorn из директории src:
  ```bash
  uvicorn main:app --reload --port 8000
  ```
- В VS Code через конфигурацию отладки (launch.json)